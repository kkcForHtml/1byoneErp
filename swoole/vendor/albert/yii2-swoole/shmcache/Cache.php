<?php
namespace yii\swoole\shmcache;

use Yii;
use yii\swoole\helpers\ArrayHelper;

class Cache extends \yii\caching\Cache
{
    public $shmcache = 'shmcache';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (extension_loaded('shmcache')) {
            $this->shmcache = new \ShmCache(Yii::$app->params['conf_path'], \ShmCache::SERIALIZER_NONE);
        }
    }

    /**
     * Retrieves a value from cache with a specified key.
     * This method should be implemented by child classes to retrieve the data
     * from specific cache storage.
     * @param string $key a unique key identifying the cached value
     * @return mixed|false the value stored in cache, false if the value is not in the cache or expired. Most often
     * value is a string. If you have disabled [[serializer]], it could be something else.
     */
    protected function getValue($key)
    {
        return $this->shmcache->get($key);
    }

    /**
     * Stores a value identified by a key in cache.
     * This method should be implemented by child classes to store the data
     * in specific cache storage.
     * @param string $key the key identifying the value to be cached
     * @param mixed $value the value to be cached. Most often it's a string. If you have disabled [[serializer]],
     * it could be something else.
     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.
     * @return bool true if the value is successfully stored into cache, false otherwise
     */
    protected function setValue($key, $value, $duration)
    {
        if ($duration == 0) {
            return $this->shmcache->set($key, $value, \ShmCache::NEVER_EXPIRED);
        } else {
            return $this->shmcache->set($key, $value, $duration);
        }
    }

    /**
     * Stores a value identified by a key into cache if the cache does not contain this key.
     * This method should be implemented by child classes to store the data
     * in specific cache storage.
     * @param string $key the key identifying the value to be cached
     * @param mixed $value the value to be cached. Most often it's a string. If you have disabled [[serializer]],
     * it could be something else.
     * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.
     * @return bool true if the value is successfully stored into cache, false otherwise
     */
    protected function addValue($key, $value, $duration)
    {
        $data = $this->getValue($key);
        if ($data === false) {
            return false;
        }
        if (is_array($data)) {
            return $this->setValue($key, ArrayHelper::merge($data, $value), $duration);
        }
        return $this->setValue($key, $value, $duration);
    }

    /**
     * Deletes a value with the specified key from cache
     * This method should be implemented by child classes to delete the data from actual cache storage.
     * @param string $key the key of the value to be deleted
     * @return bool if no error happens during deletion
     */
    protected function deleteValue($key)
    {
        return $this->shmcache->delete($key);
    }

    /**
     * Deletes all values from cache.
     * Child classes may implement this method to realize the flush operation.
     * @return bool whether the flush operation was successful.
     */
    protected function flushValues()
    {
        return $this->shmcache->clear();
    }
}